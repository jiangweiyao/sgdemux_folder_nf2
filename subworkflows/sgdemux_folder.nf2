#!/usr/bin/env nextflow

nextflow.enable.dsl=2


fastq_source_folder = Channel.fromPath(params.fastq_source_folder, type: "dir", checkIfExists: true).toList()
samplesheet = file(params.samplesheet)

workflow {
    sgdemux_folder(fastq_source_folder, params.file_name_root, samplesheet, params.output_dir_name, params.allowed_mismatches, params.min_delta, params.filter_control, params.nmask_threshold)
}


workflow sgdemux_folder_pipeline {
    take: 
        fastq_source_folder
        file_name_root
        samplesheet
        output_dir_name
        allowed_mismatches
        min_delta
        filter_control
        nmask_threshold
    main:
        sgdemux_folder(fastq_source_folder, file_name_root, samplesheet, output_dir_name, allowed_mismatches, min_delta, filter_control, nmask_threshold)
        //sgdemux_folder.out[1].flatten().view()
    emit:
        sgdemux_folder.out[1].flatten()
}


process sgdemux_folder {

    //errorStrategy 'ignore'
    publishDir params.out, overwrite: true
    memory '30 GB'
    cpus 16
    input:
    path(fastq_source_folder)
    val(file_name_root)
    file(samplesheet)
    val(output_dir_name)
    val(allowed_mismatches)
    val(min_delta)
    val(filter_control)
    val(nmask_threshold)

    output:
    path("${params.output_dir_name}/*")
    path("${params.output_dir_name}/**.fastq.gz")

    """
    mkdir -p ${output_dir_name}
    sgdemux --fastqs ${fastq_source_folder}/${file_name_root} --sample-metadata ${samplesheet} --output-dir ${output_dir_name} --allowed-mismatches ${allowed_mismatches} --min-delta ${min_delta} ${filter_control} --filter-failing-quality --quality-mask-threshold ${nmask_threshold} 
    mkdir -p ${output_dir_name}/metrics
    mv ${output_dir_name}/*.tsv ${output_dir_name}/metrics/
    """
}


